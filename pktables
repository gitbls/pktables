#!/usr/bin/python3
#
# Manages iptables chains for use with knockd
#
#
import os
import subprocess
import argparse

def decode(str):
    return str.decode('utf-8')

def osexecute(cmd):
#    if args.debug: print (cmd)
    r = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)
    if r.stderr != "": print(r.stderr)
    return r

def octet(ip, on):
    return int(ip.split('.')[on])

def ipcompare(lineip, testip):
# Returns true if lineip > testip
    if octet(lineip,0) == octet(testip,0):
        for i in [1,2,3]:
            if octet(lineip,i) < octet(testip,i):
                return False
    elif octet(lineip,0) < octet(testip,0):
        return False
    return True

def removechaincall(ipchain):
    for line in os.popen('iptables -L INPUT -vn --line-numbers'):
        lwords = ' '.join((line.rstrip()).split()).split(' ')
        try:
            ln = int(lwords[0])
        except:
            ln = 0
        if ln != 0:
            if lwords[3] == ipchain:
                osexecute (f'iptables -D INPUT {ln}')

def empty1chain(ipchain, fdelete):
# Delete the first entry if fdelete is true. Return True if chain is not empty, else False
    for line in os.popen(f'iptables -L {ipchain} -vn --line-numbers 2> /dev/null '):
        lwords = ' '.join((line.rstrip()).split()).split(' ')
        try:
            ln = int(lwords[0])
        except:
            ln = 0
        if ln != 0:
            if fdelete: osexecute (f'iptables -D {ipchain} {ln}')
            return True
    return False

def emptychain(ipchain):
# Loop deleting the first found entry until no more
    while empty1chain(ipchain, True):
        pass

def updatechain(ipchain, ipaddr, cmdfound, cmdnotfound):
# Update the chain with the new entry
# cmdfound true: delete the entry if found
# cmdnotfound true: add the entry if not found
# cmdfound and cmdnotfound are mutually exclusive
#
    for line in os.popen(f'iptables -L {ipchain} -vn --line-numbers'):
        lwords = ' '.join((line.rstrip()).split()).split(' ')
        try:
            ln = int(lwords[0])
        except:
            ln = 0
        if ln != 0:
            lineip = lwords[8].split('/')[0]

            if lwords[3] == "ACCEPT" or lwords[3] == "DROP" or lwords[3] == "REJECT" or lwords[3] == "LOG":
                if lineip == "0.0.0.0": lineip = "999.999.999.999"
                if ipaddr == lineip:
                    if cmdfound:
                        osexecute (f'iptables -D {ipchain} {ln}')
                    return
                elif ipcompare(lineip, ipaddr):
                    if cmdnotfound:
                        osexecute (f'iptables -I {ipchain} {ln} -s {ipaddr} -j ACCEPT')
                    return
#
# Command processing functions
#
def cmd_init(args, ipchain):
    if not empty1chain(ipchain, False):
        sproto = "udp" if args.udp else "tcp"
        ssyn = "--syn" if args.syn else ""
        sacceptdrop = "ACCEPT" if args.accept else "DROP"
        logmodule = "" if args.log_level is None and args.log_limit is None and args.log_burst is None else "-m limit"
        logprefix = "" if args.log_prefix is None else f'--log-prefix \"{args.log_prefix} \"'
        loglevel = "" if args.log_level   is None else f'--log-level {args.log_level}'
        loglimit = "" if args.log_limit   is None else f'--limit {args.log_limit}'
        logburst = "" if args.log_burst   is None else f'--limit-burst {args.log_burst}'
        osexecute(f'iptables -N {ipchain}')
        if args.log: osexecute(f'iptables -I {ipchain} -j LOG {logmodule} {logprefix} {logburst} {loglevel} {loglimit}')
        osexecute(f'iptables -A {ipchain} -s 0.0.0.0/0 -j {sacceptdrop}')
        osexecute(f'iptables -A INPUT -p {sproto} -m {sproto} -s 0.0.0.0/0 --dport {args.port} {ssyn} -j {ipchain}')
    else:
        print(f"? Chain '{ipchain}' already exists")

def cmd_remove(args, ipchain):
    emptychain(ipchain)
    removechaincall(ipchain)
    osexecute(f'iptables -X {ipchain}')

def cmd_add(args, ipchain):
    updatechain(ipchain, args.ipaddr.split('/')[0], False, True)

def cmd_delete(args, ipchain):
    updatechain(ipchain, args.ipaddr.split('/')[0], True, False)

def cmd_def(args, ipchain):
    print("nyi")

def cmd_list(args, ipchain):
    osexecute("iptables -L -vn")
    
def cmd_nocommand(args, ipchain):
    parser.print_help(None)
    
def cmd_help(args, ipchain):
    parser.print_help(None)
    print("\npktables manages service definitions for use with knockd\n\
by setting up and managing iptables chains for the knockd daemon.\n\
pktables adds a 'jump' to each service-specific chain, and manages the per-IP\n\
entries in the service-specific chain. Use the pktables 'add' and 'delete' commands\n\
in knockd.conf. Sample knockd.conf entry:\n\
\n\
# Initialization: pktables init --service ssh --port 22 --syn\n\
[opencloseSSH]\n\
        sequence      = 29336, 33115\n\
        seq_timeout   = 10\n\
        tcpflags      = syn\n\
        start_command = /usr/local/bin/pktables add --service ssh %IP%\n\
        cmd_timeout   = 30\n\
        stop_command  = /usr/local/bin/pktables delete --service ssh %IP%\n\
\n\
The 'pktables init' command establishes the table 'pk-ssh' and causes all traffic\n\
to port 22 with TCP syn set to jump to that table. The start_command adds the IP address\n\
that successfully completed a knock to the pk-ssh table. The stop_command removes this IP address\n\
from the table. See 'man knockd' for complete details.\n")
#
# Main program
#
parser = argparse.ArgumentParser(prog="pktables")
parser.set_defaults(func=cmd_nocommand, service="None") # For no command specified

subparsers = parser.add_subparsers(help="sub-command help")

parser_init = subparsers.add_parser("init", help="Initialize new iptables service chain")
parser_init.add_argument("service", help="Service name")
parser_init.add_argument("--port", help="Service TCP/UDP port number", required=True)
netgroup = parser_init.add_mutually_exclusive_group()
netgroup.add_argument("--udp", help="Use UDP instead of TCP", action="store_true")
netgroup.add_argument("--syn", help="Only filter TCP syn requests", action="store_true")
parser_init.add_argument("--log", help="Log packets sent to this port", action="store_true")
parser_init.add_argument("--log-prefix", help="Prefix for logged entries")
parser_init.add_argument("--log-level", help="Log level for logged entries")
parser_init.add_argument("--log-limit", help="Max packets to log per /second, /minute, /hour, or /day")
parser_init.add_argument("--log-burst", help="Burst packet maximum")
parser_init.add_argument("--accept", help="End service chain with ACCEPT instead of DROP for monitoring", action="store_true")
#parser_init.add_argument("--debug", help="Echo iptables commands", action="store_true")
parser_init.set_defaults(func=cmd_init)

parser_remove = subparsers.add_parser("remove", help="Remove an iptables service chain")
parser_remove.add_argument("service", help="Service name")
parser_remove.add_argument("--debug", help="Echo iptables commands", action="store_true")
parser_remove.set_defaults(func=cmd_remove)

parser_add = subparsers.add_parser("add", help="Add specified IP address to a service chain")
parser_add.add_argument("ipaddr", help="IP Address")
parser_add.add_argument("--service", help="Service name", required=True)
parser_add.add_argument("--debug", help="Echo iptables commands", action="store_true")
parser_add.set_defaults(func=cmd_add)

#parser_def = subparsers.add_parser("def", help="Build knockd.conf definition")
#parser_def.add_argument("")
#parser_def.set_defaults(func=cmd_def, service="None")

parser_delete = subparsers.add_parser("delete", help="Delete specified IP address from service chain")
parser_delete.add_argument("ipaddr", help="IP Address")
parser_delete.add_argument("--service", help="Service name", required=True)
parser_delete.add_argument("--debug", help="Echo iptables commands", action="store_true")
parser_delete.set_defaults(func=cmd_delete)

parser_list = subparsers.add_parser("list", help="List current iptables (iptables -L -vn)")
parser_list.add_argument("--debug", help="Echo iptables commands", action="store_true")
parser_list.set_defaults(func=cmd_list, service="None")

parser_help = subparsers.add_parser("help", help="Print help")
parser_help.set_defaults(func=cmd_help, service="None") # service=None so that args.service is defined

args = parser.parse_args()
ipchain = f'pk-{args.service}'
args.func(args, ipchain)

exit()
